name: CI/CD Pipeline for my cloud Terraform Architecture

on:
  push:
    branches:
      - main  # Trigger the pipeline on pushes to the main branch.

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Change to your preferred version.

      # Step 3: Initialize Terraform.
      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 4: Validate the Terraform configuration.
      - name: Terraform Validate
        run: terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 5: Plan the Terraform changes.
      - name: Terraform Plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 6: Optionally apply the Terraform changes.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


                # Step 6: Optionally apply the Terraform changes.
      - name: Terraform Destroy
      if: github.ref == 'refs/heads/main'
      run: terraform destroy -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
